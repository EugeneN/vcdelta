// Generated by CoffeeScript 1.8.0
(function() {
  var DEFAULT_PATTERN, E_BAD_ARGS, E_ERROR, E_OK, E_VERSION, fs, main, minimist, mkdirp, move, parse_args, path, say, to_path,
    __slice = [].slice;

  fs = require('fs');

  path = require('path');

  mkdirp = require("mkdirp");

  minimist = require('minimist');

  DEFAULT_PATTERN = '^build(-\d+)?$';

  E_OK = 0;

  E_BAD_ARGS = 1;

  E_ERROR = 2;

  E_VERSION = 3;

  say = function() {
    var m;
    m = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return console.error.apply(console, m);
  };

  to_path = function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return path.resolve.apply(path, [process.cwd()].concat(args));
  };

  parse_args = function(argv) {
    return minimist(argv.slice(2));
  };

  move = function(a, b) {
    return fs.renameSync(a, b);
  };

  main = function(argv) {
    var build_root, builds, e, pattern, re, _ref;
    _ref = parse_args(argv), build_root = _ref.build_root, pattern = _ref.pattern;
    if (!build_root) {
      say("Usage:\n\t@me --build_root=<...> [--pattern=<...>]\n\tDefault pattern: /" + DEFAULT_PATTERN + "/");
      process.exit(E_BAD_ARGS);
    }
    try {
      re = pattern ? new RegExp(pattern) : new RegExp(DEFAULT_PATTERN);
    } catch (_error) {
      e = _error;
      say("bad pattern: ", pattern, e);
      process.exit(E_BAD_ARGS);
    }
    builds = fs.readdirSync(to_path(build_root)).filter(function(fn) {
      return re.test(fn) && !fs.statSync(to_path(build_root, fn)).isFile();
    }).map(function(fn) {
      return path.basename(fn);
    }).reverse();
    return builds.map(function(build_name) {
      var build, number, number_str, _ref1;
      _ref1 = build_name.split('-'), build = _ref1[0], number_str = _ref1[1];
      if (build === 'build') {
        if (number_str === void 0) {
          return move(to_path(build_root, build_name), to_path(build_root, "" + build + "-1"));
        } else {
          number = parseInt(number_str, 10);
          return move(to_path(build_root, build_name), to_path(build_root, "" + build + "-" + (number + 1)));
        }
      } else {
        return say("bad build dir:", build_name);
      }
    });
  };

  module.exports = main;

}).call(this);
